name: 'Terragrunt Infra Deployment'

on:
  workflow_dispatch:
    inputs:
      env_path:
        description: 'Environment path (e.g., infra-live/dev/vpc, infra-live/staging/ec2, or all)'
        required: true
        default: 'infra-live/dev/vpc'
      action:
        type: choice
        description: 'Terragrunt Action to Perform'
        options:
          - plan
          - apply
          - destroy
        required: true
        default: 'plan'

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  TG_VERSION: v0.67.4
  TF_VERSION: 1.9.8
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terragrunt:
    name: Terragrunt ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.TG_VERSION }}/terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          sudo chmod +x /usr/local/bin/terragrunt
          terragrunt --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt Init
        run: |
          ROOT_DIR=infra-live
          if [ "${{ github.event.inputs.env_path }}" == "all" ]; then
            echo "Initializing all environments..."
            for ENV in dev staging prod; do
              echo "Initializing $ENV..."
              cd $ROOT_DIR/$ENV
              terragrunt run-all init --terragrunt-non-interactive
              cd ../../
            done
          else
            cd ${{ github.event.inputs.env_path }}
            terragrunt init --terragrunt-non-interactive
          fi

      - name: Terragrunt Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: |
          ROOT_DIR=infra-live
          if [ "${{ github.event.inputs.env_path }}" == "all" ]; then
            echo "Planning all environments..."
            for ENV in dev staging prod; do
              echo "Planning $ENV..."
              cd $ROOT_DIR/$ENV
              terragrunt run-all plan --terragrunt-non-interactive
              cd ../../
            done
          else
            cd ${{ github.event.inputs.env_path }}
            terragrunt run-all plan --terragrunt-non-interactive
          fi

      - name: Terragrunt Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          ROOT_DIR=infra-live
          if [ "${{ github.event.inputs.env_path }}" == "all" ]; then
            echo "Applying all environments..."
            for ENV in dev staging prod; do
              echo "Applying $ENV..."
              cd $ROOT_DIR/$ENV
              terragrunt run-all apply --terragrunt-non-interactive --auto-approve
              cd ../../
            done
          else
            cd ${{ github.event.inputs.env_path }}
            terragrunt run-all apply --terragrunt-non-interactive --auto-approve
          fi

      - name: Terragrunt Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          ROOT_DIR=infra-live
          if [ "${{ github.event.inputs.env_path }}" == "all" ]; then
            echo "Destroying all environments..."
            for ENV in dev staging prod; do
              echo "Destroying $ENV..."
              cd $ROOT_DIR/$ENV
              terragrunt run-all destroy --terragrunt-non-interactive --auto-approve
              cd ../../
            done
          else
            cd ${{ github.event.inputs.env_path }}
            terragrunt run-all destroy --terragrunt-non-interactive --auto-approve
          fi
